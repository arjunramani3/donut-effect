wfh_emp = sum(weighted_emp, na.rm = TRUE)/sum(total_count, na.rm = TRUE),
tech = sum(total_tech, na.rm=TRUE)/sum(total_count, na.rm=TRUE))
all <- rbind(all, cur)
}
all2 <- all %>% filter(!is.na(wfh_wage)) %>%
distinct(zip, .keep_all = TRUE)
all2 <- all %>% distinct(county, .keep_all = TRUE)
write_csv(all2, '~/Documents/Economist/data/housing-prices-covid-new/intermediate_data/wfh_tech_share.csv')
## Preliminaries
rm(list=ls())
## This function will check if a package is installed, and if not, install it
pkgTest <- function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE);
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages <- c("tidyverse", "zoo", "directlabels", "cowplot", "pracma")
lapply(packages, pkgTest);
cities <- c('San Francisco, CA', 'New York, NY', 'Chicago, IL', 'Boston, MA',
'Los Angeles, CA', 'Washington, DC', 'Atlanta, GA', 'Miami, FL',
'Philadelphia, PA', 'Dallas, TX', 'Houston, TX', 'Phoenix, AZ')
#define colors
black <- "#2E2D29"; cardinal <- "#B1040E"; teal <- "#66b2b2"; green <- "#228B22"; marmalade <- "#d16002"
options(repr.plot.width=10, repr.plot.height=8)
#end date for figures
end_date = '2022-11-01'
end_date_long = '2023-01-01'
## start and end date for for cumulations
start_period = '2017-08-01' #start period of cumulation ending in 2020-03-01 exclusive
end_period = '2022-10-01' #end period for cumulation starting in 2020-03-01 inclusive
#set to your working directory
setwd('~/Documents/zillow/thesis/donut-effect/')
msa_chars <- msa_chars <- read_csv('./data/msa_all_chars.csv') %>% filter(!is.na(MsaName)) %>%
mutate(msa_pop_rank = dense_rank(desc(`2019 Population`)),
msa_pop_group = case_when(msa_pop_rank %in% c(1:12) ~ 'top12',
msa_pop_rank %in% c(13:50) ~ '13-50',
TRUE ~ '51+'),
msa_pop_group = ifelse(MetroShort %in% c('New York, NY', 'San Francisco, CA'), 'NY_SF', msa_pop_group)) %>%
select(MetroShort, msa_pop_group)
#read in all zip code characteristics
chars <- read_csv('./data/zip_all_chars_cbd.csv') %>% filter(!is.na(`2019 Population`))
#combine chars
chars_all <- chars %>% filter(!is.na(`2019 Population`)) %>% left_join(msa_chars, by='MetroShort') %>%
mutate(msa_pop_group=replace_na(msa_pop_group, 'rural'))
## Figure 7(c) msa level chart for population flows
#read in zip code level USPS flow data
usps <- read_csv('./data/USPS_zips.csv')
## A. population flows
#construct dataset
temp <- chars_all %>% inner_join(usps, by = 'zip') %>%
mutate(date = as.Date(date)) %>%
filter(date >= as.Date('2018-01-01'), date < as.Date(end_date)) %>%
group_by(zip) %>% mutate(net_pop = na.approx(net_pop, na.rm=FALSE, rule = 2)) %>%
group_by(msa_pop_group, date) %>%
summarise(net_pop = sum(net_pop, na.rm = TRUE)/sum(`2019 Population`)*100) %>%
group_by(msa_pop_group) %>% mutate(net_pop = net_pop - net_pop[date == as.Date('2020-02-15')]) %>%
mutate(emph="b", val = net_pop, name = msa_pop_group)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-.2, .2) + #(-2, .3)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
## A. population flows
#construct dataset
temp <- chars_all %>% inner_join(usps, by = 'zip') %>%
mutate(date = as.Date(date)) %>%
filter(date >= as.Date('2018-01-01'), date < as.Date(end_date)) %>%
group_by(zip) %>% mutate(net_pop = na.approx(net_pop, na.rm=FALSE, rule = 2)) %>%
group_by(msa_pop_group, date) %>%
summarise(net_pop = sum(net_pop, na.rm = TRUE)/sum(`2019 Population`)*100) %>%
group_by(msa_pop_group) %>% mutate(cumsum(net_pop = net_pop - net_pop[date == as.Date('2020-02-15')])) %>%
mutate(emph="b", val = net_pop, name = msa_pop_group)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-.2, .2) + #(-2, .3)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
## A. population flows
#construct dataset
temp <- chars_all %>% inner_join(usps, by = 'zip') %>%
mutate(date = as.Date(date)) %>%
filter(date >= as.Date('2018-01-01'), date < as.Date(end_date)) %>%
group_by(zip) %>% mutate(net_pop = na.approx(net_pop, na.rm=FALSE, rule = 2)) %>%
group_by(msa_pop_group, date) %>%
summarise(net_pop = sum(net_pop, na.rm = TRUE)/sum(`2019 Population`)*100) %>%
group_by(msa_pop_group) %>% mutate(net_pop = cumsum(net_pop - net_pop[date == as.Date('2020-02-15')])) %>%
mutate(emph="b", val = net_pop, name = msa_pop_group)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-.2, .2) + #(-2, .3)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-1, .2) + #(-2, .3)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-1, 1) + #(-2, .3)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-3, 1) + #(-2, .3)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#save plot
ggsave('./figures-tables/fig7c.png', plot = last_plot(), width = 10, height = 8)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-3, 1) + #(-2, .3)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-1, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-3, 1) + #(-2, .3)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-1.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#save plot
ggsave('./figures-tables/fig7c.png', plot = last_plot(), width = 10, height = 8)
## A. population flows
#construct dataset
temp <- chars_all %>% inner_join(usps, by = 'zip') %>%
mutate(date = as.Date(date)) %>%
filter(date >= as.Date('2018-01-01'), date < as.Date(end_date)) %>%
group_by(zip) %>% mutate(net_pop = na.approx(net_pop, na.rm=FALSE, rule = 2)) %>%
group_by(msa_pop_group, date) %>%
summarise(net_pop = sum(net_pop, na.rm = TRUE)/sum(`2019 Population`)*100) %>%
group_by(msa_pop_group) %>% mutate(net_pop = net_pop - net_pop[date == as.Date('2020-02-15')]) %>%
mutate(emph="b", val = net_pop, name = msa_pop_group)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-3, 1) + #(-2, .3)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-1.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-.2, .2) + #(-3, 1)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-1.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#save plot
ggsave('./figures-tables/fig7c.png', plot = last_plot(), width = 10, height = 8)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-3, 1) + #(-.2, 2)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Cumulative deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-1.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
## A. population flows
#construct dataset
temp <- chars_all %>% inner_join(usps, by = 'zip') %>%
mutate(date = as.Date(date)) %>%
filter(date >= as.Date('2018-01-01'), date < as.Date(end_date)) %>%
group_by(zip) %>% mutate(net_pop = na.approx(net_pop, na.rm=FALSE, rule = 2)) %>%
group_by(msa_pop_group, date) %>%
summarise(net_pop = sum(net_pop, na.rm = TRUE)/sum(`2019 Population`)*100) %>%
group_by(msa_pop_group) %>% mutate(net_pop = cumsum(net_pop - net_pop[date == as.Date('2020-02-15')])) %>%
mutate(emph="b", val = net_pop, name = msa_pop_group)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-3, 1) + #(-.2, 2)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Cumulative deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-1.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#make plot
temp %>% ggplot(
aes(x=date, y = val, color = name, linetype = as.factor(emph),
alpha = as.factor(emph),size = as.factor(emph)), guide='none') +
scale_x_date(date_labels="%Y",date_breaks  ="1 year") +
geom_line()+
xlim(as.Date('2018-01-01'), as.Date(end_date_long)) +
ylim(-2, 1) + #(-.2, 2)
geom_vline(xintercept=as.Date('2020-02-15'), size=.5, color="black") +
geom_dl(aes(label = name), method = list(cex = 1.5, 'last.bumpup', cex = 1.5)) +
scale_colour_manual(values = c(teal, cardinal, black, green, marmalade), guide='none')+
scale_size_manual(values = c(1.8, 1), guide="none")+
scale_alpha_manual(values = c(1, 0.8), guide="none")+
scale_linetype(guide='none') +
labs(x  = "",
y = "Cumulative deviations from Feb 2020 (% points)",
size = 7
)+
geom_text(label="Feb 2020", x=as.Date('2019-11-01'), y=-1.5, size = 6, color = 'black') +
theme_minimal()+
theme(text = element_text(size=20),
plot.title= element_text(hjust = 0.5, family = "serif"),
plot.caption = element_text(size = 16),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20)
)
#save plot
ggsave('./figures-tables/fig7c.png', plot = last_plot(), width = 10, height = 8)
#save plot
ggsave('./figures-tables/fig7c.png', plot = last_plot(), width = 10, height = 8)
## Preliminaries
rm(list=ls())
## This function will check if a package is installed, and if not, install it
pkgTest <- function(x) {
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE);
if(!require(x, character.only = TRUE)) stop("Package not found")
}
}
## These lines load the required packages
packages <- c("tidyverse", "zoo", "directlabels", "cowplot", "pracma")
lapply(packages, pkgTest);
cities <- c('San Francisco, CA', 'New York, NY', 'Chicago, IL', 'Boston, MA',
'Los Angeles, CA', 'Washington, DC', 'Atlanta, GA', 'Miami, FL',
'Philadelphia, PA', 'Dallas, TX', 'Houston, TX', 'Phoenix, AZ')
#define colors
black <- "#2E2D29"; cardinal <- "#B1040E"; teal <- "#66b2b2"; green <- "#228B22"; marmalade <- "#d16002"
options(repr.plot.width=10, repr.plot.height=8)
#end date for figures
end_date = '2022-11-01'
end_date_long = '2023-01-01'
## start and end date for for cumulations
start_period = '2017-08-01' #start period of cumulation ending in 2020-03-01 exclusive
end_period = '2022-10-01' #end period for cumulation starting in 2020-03-01 inclusive
#set to your working directory
setwd('~/Documents/zillow/thesis/donut-effect/')
###########################################
## Footnote: cumulative flows alternate calculation
## We calculate cumulative population outflows as a percent of stock
## and cumulative establishment outflows as a percent of stock
## from Feb 2019-20 and 2020-21 (unadjusted for prior flow)
###########################################
#read in zip code characteristics
chars <- read_csv('./data/zip_all_chars_cbd.csv',
col_types = cols('zip' = col_integer())) %>% dplyr::select(!estab_count)
#read in business establishment counts
bus_chars <- read_csv('./data/zbp_wfh.csv',
col_types = cols('zip' = col_integer()))
chars <- chars %>% inner_join(bus_chars, by = 'zip')
#read in zip code month level USPS flow data
usps <- read_csv('./data/USPS_zips.csv')
#Calulate outflows from CBDs for post-Covid period (Feb 2020 - Dec 2021)
inflow_post = chars %>% filter(MetroShort %in% cities, dist_to_cbd < 2000) %>%
inner_join(usps, by = 'zip') %>% filter(date >= as.Date('2020-03-01'), date < as.Date(end_period)) %>%
summarise(net_inflow = sum(net_pop, na.rm = TRUE))
#Calulate outflows from CBDs for pre-Covid period (Apr 2018 - Feb 2020)
inflow_pre = chars %>% filter(MetroShort %in% cities, dist_to_cbd < 2000) %>%
inner_join(usps, by = 'zip') %>% filter(date >= as.Date(start_period), date < as.Date('2020-03-01')) %>%
summarise(net_inflow = sum(net_pop, na.rm = TRUE))
pop = chars %>% filter(MetroShort %in% cities, dist_to_cbd < 2000) %>% summarise(pop = sum(`2019 Population`, na.rm = TRUE))
print(c(inflow_pre, pop, inflow_pre/pop))
print(c(inflow_post, pop, inflow_post/pop))
#Calulate outflows from CBDs for post-Covid period (Feb 2020 - Dec 2021)
inflow_post = chars %>% filter(MetroShort %in% cities, dist_to_cbd < 2000) %>%
inner_join(usps, by = 'zip') %>% filter(date >= as.Date('2020-03-01'), date < as.Date(end_period)) %>%
summarise(net_inflow = sum(net_bus, na.rm = TRUE))
#Calulate outflows from CBDs for pre-Covid period (Apr 2018 - Feb 2020)
inflow_pre = chars %>% filter(MetroShort %in% cities, dist_to_cbd < 2000) %>%
inner_join(usps, by = 'zip') %>% filter(date >= as.Date(start_period), date < as.Date('2020-03-01')) %>%
summarise(net_inflow = sum(net_bus, na.rm = TRUE))
stock = chars %>% filter(MetroShort %in% cities, dist_to_cbd < 2000) %>% summarise(stock = sum(estab_count, na.rm = TRUE))
print(c(inflow_pre, stock, inflow_pre/stock))
print(c(inflow_post, stock, inflow_post/stock))
